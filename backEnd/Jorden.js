function addSubgroupCompJord() {
    const container = document.getElementById('subgroups');
    const newSubgroup = document.createElement('div');
    newSubgroup.className = 'jorden-input-group';
    newSubgroup.innerHTML = `
        <button class="jorden-remove-btn" onclick="removeSubgroupComp(this)">x</button>
        <input type="number" placeholder="Generator" min="1" />
    `;
    container.appendChild(newSubgroup);
    updateSeparatorsCompJord();
}

function removeSubgroupComp(button) {
    const container = document.getElementById('subgroups');
    container.removeChild(button.parentElement);
    updateSeparatorsCompJord();
}

function updateSeparatorsCompJord() {
    const container = document.getElementById('subgroups');
    const items = container.querySelectorAll('.jorden-input-group');
    items.forEach((item, index) => {
        // Remove existing separators
        const existingSeparator = item.querySelector('.jorden-separator');
        if (existingSeparator) {
            item.removeChild(existingSeparator);
        }
        
        // Add new separator
        if (index < items.length - 1) {
            let separator = document.createElement('span');
            separator.className = 'jorden-separator';
            separator.innerText = 'âŠƒ';
            item.appendChild(separator);
        }
    });
}

function calculateSubgroupElements(order, generator) {
    const elements = [];
    for (let i = 0; i < order; i++) {
        elements.push((generator * i) % order);
    }
    return [...new Set(elements)]; // Return unique elements
}

function checkSeriesCompJord() {
    const originalOrder = parseInt(document.getElementById('originalGroup').value.trim());
    if (isNaN(originalOrder) || originalOrder <= 0) {
        document.getElementById('resultComp').innerText = 'Please enter a valid order for the original group.';
        document.getElementById('stepsComp').innerText = '';
        return;
    }

    const inputs = document.querySelectorAll('#subgroups input');
    const generators = Array.from(inputs).map(input => parseInt(input.value.trim()));
    
    if (generators.some(isNaN) || generators.some(g => g <= 0)) {
        document.getElementById('resultComp').innerText = 'Please enter valid generators for the subgroups.';
        document.getElementById('stepsComp').innerText = '';
        return;
    }

    let stepsComp = '';
    let isCompositionSeries = true;
    let previousSubgroupOrder = originalOrder;

    for (let i = 0; i < generators.length; i++) {
        const generator = generators[i];
        const currentSubgroup = calculateSubgroupElements(originalOrder, generator);
        const currentSubgroupOrder = currentSubgroup.length;
        
        stepsComp += `Subgroup generated by ${generator}: { ${currentSubgroup.join(', ')} }\n`;

        if (i > 0) {
            const prevSubgroupOrder = calculateSubgroupElements(originalOrder, generators[i - 1]).length;
            const quotient = previousSubgroupOrder / currentSubgroupOrder;
            
            if (previousSubgroupOrder % currentSubgroupOrder !== 0) {
                isCompositionSeries = false;
                stepsComp += `Order of previous subgroup ${previousSubgroupOrder} / Order of current subgroup ${currentSubgroupOrder} is not an integer.\n`;
                stepsComp += `The subgroup generated by ${generators[i - 1]} is not maximal relative to the subgroup generated by ${generator}.\n`;
                break;
            }
            
            stepsComp += `Order of previous subgroup ${previousSubgroupOrder} / Order of current subgroup ${currentSubgroupOrder} = ${quotient}\n`;

            if (quotient !== 1) {
                stepsComp += `The subgroup generated by ${generator} is maximal relative to the previous subgroup.\n`;
            }
        }

        previousSubgroupOrder = currentSubgroupOrder;
    }

    if (isCompositionSeries) {
        document.getElementById('resultComp').innerText = 'The series is a valid composition series.';
    } else {
        document.getElementById('resultComp').innerText = 'The series is not a valid composition series.';
    }

    document.getElementById('stepsComp').innerText = stepsComp;
}
